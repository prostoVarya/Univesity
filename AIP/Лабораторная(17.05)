//Задача №1
using System;
using System.Collections.Generic;
using System.Linq;

// Структуры для данных
public struct OS
{
    public int Id;
    public string Name;
}

public struct LaptopBrand
{
    public int Id;
    public string Name;
}

public struct Student
{
    public int Id;
    public string Class;
    public string FullName;
    public bool HasComputer;
    public int? OSId;
    public int? LaptopBrandId;
}

class Program
{
    static List<OS> operatingSystems = new List<OS>
    {
        new OS { Id = 1, Name = "Windows 10" },
        new OS { Id = 2, Name = "Windows 11" },
        new OS { Id = 3, Name = "macOS" }
    };

    static List<LaptopBrand> laptopBrands = new List<LaptopBrand>
    {
        new LaptopBrand { Id = 1, Name = "Lenovo" },
        new LaptopBrand { Id = 2, Name = "HP" },
        new LaptopBrand { Id = 3, Name = "Dell" },
        new LaptopBrand { Id = 4, Name = "Apple" }
    };

    static List<Student> students = new List<Student>
    {
        new Student { Id = 1, Class = "10A", FullName = "Иванов Иван", HasComputer = true, OSId = 1, LaptopBrandId = 1 },
        new Student { Id = 2, Class = "10A", FullName = "Петров Петр", HasComputer = true, OSId = 2, LaptopBrandId = 2 },
        new Student { Id = 3, Class = "10B", FullName = "Сидоров Сидор", HasComputer = false },
        new Student { Id = 4, Class = "10B", FullName = "Алексеев Алексей", HasComputer = true, OSId = 3, LaptopBrandId = 4 },
        new Student { Id = 5, Class = "11A", FullName = "Сергеев Сергей", HasComputer = true, OSId = 1, LaptopBrandId = 3 }
    };

    static void Main(string[] args)
    {
        while (true)
        {
            Console.WriteLine("\nМеню:");
            Console.WriteLine("1. Список учеников с ноутбуками");
            Console.WriteLine("2. Список учеников по классам (сортировка по марке ноутбука)");
            Console.WriteLine("3. Поиск учеников по марке ноутбука");
            Console.WriteLine("4. Группировка учеников по ОС");
            Console.WriteLine("5. Выход");
            Console.Write("Выберите опцию: ");

            switch (Console.ReadLine())
            {
                case "1":
                    ShowStudentsWithLaptops();
                    break;
                case "2":
                    ShowStudentsByClassSortedByBrand();
                    break;
                case "3":
                    SearchStudentsByBrand();
                    break;
                case "4":
                    GroupStudentsByOS();
                    break;
                case "5":
                    return;
                default:
                    Console.WriteLine("Неверный выбор!");
                    break;
            }
        }
    }

    static void ShowStudentsWithLaptops()
    {
        Console.WriteLine("\nУченики с ноутбуками:");
        var studentsWithLaptops = students.Where(s => s.HasComputer && s.LaptopBrandId != null);
        
        foreach (var student in studentsWithLaptops)
        {
            Console.WriteLine($"{student.FullName} (Класс: {student.Class})");
        }
    }

    static void ShowStudentsByClassSortedByBrand()
    {
        Console.WriteLine("\nУченики по классам (сортировка по марке ноутбука):");
        
        var groupedStudents = students
            .Where(s => s.HasComputer && s.LaptopBrandId != null)
            .OrderBy(s => s.Class)
            .ThenBy(s => GetBrandName(s.LaptopBrandId))
            .GroupBy(s => s.Class);

        foreach (var group in groupedStudents)
        {
            Console.WriteLine($"\nКласс: {group.Key}");
            foreach (var student in group)
            {
                Console.WriteLine($"{student.FullName} - Марка: {GetBrandName(student.LaptopBrandId)}");
            }
        }
    }

    static void SearchStudentsByBrand()
    {
        Console.Write("\nВведите марку ноутбука: ");
        string brand = Console.ReadLine();

        var foundStudents = students
            .Where(s => s.HasComputer && 
                   s.LaptopBrandId != null && 
                   GetBrandName(s.LaptopBrandId).Contains(brand, StringComparison.OrdinalIgnoreCase));

        Console.WriteLine($"\nНайдено {foundStudents.Count()} учеников:");
        foreach (var student in foundStudents)
        {
            Console.WriteLine($"{student.FullName} (Класс: {student.Class}, Марка: {GetBrandName(student.LaptopBrandId)})");
        }
    }

    static void GroupStudentsByOS()
    {
        Console.WriteLine("\nГруппировка учеников по ОС:");
        
        var groupedStudents = students
            .Where(s => s.HasComputer && s.OSId != null)
            .GroupBy(s => GetOSName(s.OSId));

        foreach (var group in groupedStudents)
        {
            Console.WriteLine($"\nОС: {group.Key}");
            foreach (var student in group)
            {
                Console.WriteLine($"{student.FullName} (Класс: {student.Class})");
            }
        }
    }

    // Вспомогательные методы
    static string GetBrandName(int? brandId)
    {
        return brandId.HasValue ? 
            laptopBrands.FirstOrDefault(b => b.Id == brandId).Name : 
            "Неизвестно";
    }

    static string GetOSName(int? osId)
    {
        return osId.HasValue ? 
            operatingSystems.FirstOrDefault(os => os.Id == osId).Name : 
            "Неизвестно";
    }
}
//Задача №2 (Auto)
using System;
using System.Collections.Generic;
using System.Linq;
public class Client
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Phone { get; set; }
    public List<Car> Cars { get; set; } = new List<Car>();
}

public class Car
{
    public int Id { get; set; }
    public string Make { get; set; } // Марка 
    public string Model { get; set; } // Модель 
    public Client Owner { get; set; }
}

public class ServiceRecord
{
    public int Id { get; set; }
    public DateTime VisitDate { get; set; } // Дата обращения
    public string ServiceName { get; set; } // Название услуги
    public decimal Price { get; set; } // Стоимость услуги
    public Car ClientCar { get; set; } // Автомобиль клиента
}

class Program
{
    static void Main()
    {
        // Создаем тестовые данные
        var clients = new List<Client>
        {
            new Client { Id = 1, Name = "Иван Иванов", Phone = "123-456" },
            new Client { Id = 2, Name = "Петр Петров", Phone = "789-012" }
        };

        var cars = new List<Car>
        {
            new Car { Id = 1, Make = "Toyota", Model = "Camry", Owner = clients[0] },
            new Car { Id = 2, Make = "Lada", Model = "Accord", Owner = clients[1] },
            new Car { Id = 3, Make = "Toyota", Model = "Corolla", Owner = clients[0] }
        };

        // Добавляем автомобили клиентам
        clients[0].Cars.AddRange(new[] { cars[0], cars[2] });
        clients[1].Cars.Add(cars[1]);

        var serviceRecords = new List<ServiceRecord>
        {
            new ServiceRecord { Id = 1, VisitDate = new DateTime(2023, 5, 10), 
                ServiceName = "Замена масла", Price = 2000, ClientCar = cars[0] },
            new ServiceRecord { Id = 2, VisitDate = new DateTime(2023, 5, 11), 
                ServiceName = "Ремонт тормозов", Price = 5000, ClientCar = cars[1] },
            new ServiceRecord { Id = 3, VisitDate = new DateTime(2023, 5, 12), 
                ServiceName = "Диагностика", Price = 1500, ClientCar = cars[0] }
        };

        // 1. Группировка клиентов по марке машины
        Console.WriteLine("Клиенты по марке автомобиля:");
        var clientsByMake = cars
            .GroupBy(c => c.Make)
            .ToList();

        foreach (var group in clientsByMake)
        {
            Console.WriteLine($"Марка: {group.Key}");
            foreach (var car in group)
            {
                Console.WriteLine($"  Клиент: {car.Owner.Name}, Модель: {car.Model}");
            }
            Console.WriteLine();
        }

        // 2. Группировка по дате обращения, сортировка по услуге
        Console.WriteLine("\nПосещения по дате, отсортированные по услуге:");
        var visitsByDate = serviceRecords
            .OrderBy(sr => sr.VisitDate)
            .ThenBy(sr => sr.ServiceName)
            .GroupBy(sr => sr.VisitDate.Date)
            .ToList();

        foreach (var group in visitsByDate)
        {
            Console.WriteLine($"Дата: {group.Key:yyyy-MM-dd}");
            foreach (var visit in group)
            {
                Console.WriteLine($"  Клиент: {visit.ClientCar.Owner.Name}, Услуга: {visit.ServiceName}");
            }
            Console.WriteLine();
        }

        // 3. Сумма услуг за период
        DateTime startDate = new DateTime(2023, 5, 1);
        DateTime endDate = new DateTime(2023, 5, 31);

        decimal total = serviceRecords
            .Where(sr => sr.VisitDate >= startDate && sr.VisitDate <= endDate)
            .Sum(sr => sr.Price);

        Console.WriteLine($"\nОбщая сумма услуг с {startDate:dd.MM.yyyy} по {endDate:dd.MM.yyyy}: {total} руб.");
    }
}
